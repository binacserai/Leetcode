//LEFT ROTATE MATRIX BY K TIMES
1.BRUTE FORCE
TC-O(N*N)
SC-0(N*N)
class Solution {
    public int[][] rotateMatrix(int k, int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;

        // Normalize the number of rotations
        k = k % m;

        // Create a new matrix to store the rotated result
        int[][] rotated = new int[n][m];

        // Perform the rotations
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                rotated[i][j] = mat[i][(j + k) % m];
            }
        }

        return rotated;
    }
}

2.INPLACE - OPTIMAL
TC-O(N*N)
SC =O(1)
class Solution {
    public int[][] rotateMatrix(int k, int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;

        // Normalize the number of rotations
        k = k % m;

        for (int i = 0; i < n; i++) {
            // Reverse the entire row
            reverse(mat[i], 0, m - 1);

            // Reverse the first part
            reverse(mat[i], 0, m - k - 1);

            // Reverse the second part
            reverse(mat[i], m - k, m - 1);
        }

        return mat;
    }

    private void reverse(int[] row, int start, int end) {
        while (start < end) {
            int temp = row[start];
            row[start] = row[end];
            row[end] = temp;
            start++;
            end--;
        }
    }

ROTATE MATRIX BY 90 DEGREE CLOCKWISE
1.BRUTE FORCE O(N*N)
SC = O(N*n)
class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int ans [][] = new int [n][n];
        for(int i =0;i<n;i++)
        {
            for(int j =0;j<n;j++)
            {
                ans[j][n-i-1] = matrix[i][j];
            }
        }
        
        for(int i =0;i<n;i++)
        {
            for(int j =0;j<n;j++)
            {
                matrix[i][j] = ans [i][j];
            }
        }
        
       
    }
}

2.INPLACE
TC-O(N*N)
SC-O(1)

class Solution {
    public void rotate(int[][] matrix) {
        int n = matrix.length;
    // Finding the transpose of the matrix
    for(int i = 0; i < n; i ++) {
        for(int j = i; j < n; j ++) {
            if(i != j) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
    }
    // Reversing each row of the matrix
     for(int i = 0; i < n; i ++) {
         int low = 0, high = n - 1;
         while(low <= high) {
        int temp = matrix[i][high];
        matrix[i][high] = matrix[i][low];
        matrix[i][low] = temp;
        high --;
        low ++;
         }
     }
        
        
    }
}

